#version 450

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D equirectangular_image;

layout(binding = 1, rgba8) uniform imageCube irradiance_image;
layout(binding = 2, rgba8) uniform imageCube radiance_image;
layout(binding = 3, rgba8) uniform imageCube skybox_image;

float roughness = 0.5;        // Lets prefilter for this roughness for now

uint hash(uint a)
{
	a = (a + 0x7ed55d16) + (a << 12);
	a = (a ^ 0xc761c23c) ^ (a >> 19);
	a = (a + 0x165667b1) + (a << 5);
	a = (a + 0xd3a2646c) ^ (a << 9);
	a = (a + 0xfd7046c5) + (a << 3);
	a = (a ^ 0xb55a4f09) ^ (a >> 16);
	return a;
}

const float PI       = 3.14159265359;
const vec2  inv_atan = vec2(0.1591, 0.3183);

vec2 to_spherical_mapping(vec3 v)
{
	vec2 uv = vec2(atan(v.z, v.x), asin(v.y));

	uv *= inv_atan;
	uv += 0.5;

	return uv;
}

vec3 cube_direction_vector()
{
	vec2 xy        = vec2(gl_GlobalInvocationID.xy);
	vec2 cube_size = vec2(imageSize(irradiance_image));

	vec3 uvz = vec3(xy / cube_size - vec2(0.5), 0.5);        // Normalize to 1 and then scale from 0 to 1 into -0.5 to 0.5
	uvz      = normalize(uvz);

	return uvz;
}

void cube_uv_mapping(uint face, inout vec3 uvz)
{
	if (face == 0)        // +x
	{
		uvz.xz *= -1;
	}
	else if (face == 1)        // -x
	{
		uvz = uvz;
	}
	else if (face == 2)        // +y
	{
		uvz = uvz.yzx;
		uvz.yz *= -1;
	}
	else if (face == 3)        // -y
	{
		uvz = uvz.yzx;
		uvz.xz *= -1;
	}
	else if (face == 4)        // +z
	{
		uvz.x *= -1;
		uvz = uvz.zyx;
	}
	else if (face == 5)        // -z
	{
		uvz.z *= -1;
		uvz = uvz.zyx;
	}
}

vec2 cubemap_sampling_uvs(vec3 direction_vector)
{
	vec2 uv = to_spherical_mapping(direction_vector);
	return uv;
}

// The following is based on shaders from https://github.com/JoeyDeVries/LearnOpenGL/tree/master/src/6.pbr/2.2.2.ibl_specular_textured
vec4 convolute(vec3 N)
{
	vec4 FragColor;
	// The world vector acts as the normal of a tangent surface
	// from the origin, aligned to WorldPos. Given this normal, calculate all
	// incoming radiance of the environment. The result of this radiance
	// is the radiance of light coming from -Normal direction, which is what
	// we use in the PBR shader to sample irradiance.
	// vec3 N = normalize(WorldPos);

	vec3 irradiance = vec3(0.0);

	// tangent space calculation from origin point
	vec3 up    = vec3(0.0, 1.0, 0.0);
	vec3 right = normalize(cross(up, N));
	up         = normalize(cross(N, right));

	float sampleDelta = 0.025;
	float nrSamples   = 0.0;
	for (float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)
	{
		for (float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)
		{
			// spherical to cartesian (in tangent space)
			vec3 tangentSample = vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));
			// tangent space to world
			vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * N;

			// irradiance += texture(base_color_sampler, sampleVec).rgb * cos(theta) * sin(theta);

			vec2 uv = cubemap_sampling_uvs(sampleVec);
			irradiance += texture(equirectangular_image, uv).rgb * cos(theta) * sin(theta);

			nrSamples++;
		}
	}

	irradiance = PI * irradiance * (1.0 / float(nrSamples));

	FragColor = vec4(irradiance, 1.0);

	return FragColor;
}

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
	float a      = roughness * roughness;
	float a2     = a * a;
	float NdotH  = max(dot(N, H), 0.0);
	float NdotH2 = NdotH * NdotH;

	float nom   = a2;
	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom       = PI * denom * denom;

	return nom / denom;
}

// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
// efficient VanDerCorpus calculation.
float RadicalInverse_VdC(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return float(bits) * 2.3283064365386963e-10;        // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
	return vec2(float(i) / float(N), RadicalInverse_VdC(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
	float a = roughness * roughness;

	float phi      = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

	// from spherical coordinates to cartesian coordinates - halfway vector
	vec3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;

	// from tangent-space H vector to world-space sample vector
	vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent   = normalize(cross(up, N));
	vec3 bitangent = cross(N, tangent);

	vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}

vec4 prefilter(vec3 N)
{
	// make the simplifying assumption that V equals R equals the normal
	vec3 R = N;
	vec3 V = R;

	const uint MIP_LEVELS   = 10u;
	uint       SAMPLE_COUNT = 1024u * MIP_LEVELS;
	// This needs to be scaled up by roughness higher roughness means more samples in corresponding lower mipLevel
	SAMPLE_COUNT           = uint(SAMPLE_COUNT * clamp(roughness, 0.0, 1.0));
	vec3  prefilteredColor = vec3(0.0);
	float totalWeight      = 0.0;

	for (uint i = 0u; i < SAMPLE_COUNT; ++i)
	{
		// generates a sample vector that's biased towards the preferred alignment direction (importance sampling).
		vec2 Xi = Hammersley(i, SAMPLE_COUNT);
		vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
		vec3 L  = normalize(2.0 * dot(V, H) * H - V);

		float NdotL = max(dot(N, L), 0.0);
		if (NdotL > 0.0)
		{
			// sample from the environment's mip level based on roughness/pdf
			float D     = DistributionGGX(N, H, roughness);
			float NdotH = max(dot(N, H), 0.0);
			float HdotV = max(dot(H, V), 0.0);
			float pdf   = D * NdotH / (4.0 * HdotV) + 0.0001;

			float resolution = 512.0;        // resolution of source cubemap (per face)
			float saTexel    = 4.0 * PI / (6.0 * resolution * resolution);
			float saSample   = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);

			float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);

			// prefilteredColor += textureLod(environmentMap, L, mipLevel).rgb * NdotL;

			vec2 uv = cubemap_sampling_uvs(L);
			prefilteredColor += textureLod(equirectangular_image, uv, mipLevel).rgb * NdotL;

			totalWeight += NdotL;
		}
	}

	prefilteredColor = prefilteredColor / totalWeight;

	vec4 FragColor = vec4(prefilteredColor, 1.0);

	return FragColor;
}

vec4 cubify(vec3 uvz)
{
	vec2 uv = to_spherical_mapping(uvz);
	return texture(equirectangular_image, uv);
}

void main()
{
	ivec3 xyz       = ivec3(gl_GlobalInvocationID.xyz);
	vec2  cube_size = vec2(imageSize(irradiance_image));

	vec3 uvz = cube_direction_vector();
	cube_uv_mapping(xyz.z, uvz);

	vec4 skybox_output     = cubify(uvz);
	vec4 irradiance_output = convolute(uvz);
	vec4 radiance_output   = prefilter(uvz);

	imageStore(irradiance_image, xyz, irradiance_output);
	imageStore(radiance_image, xyz, radiance_output);
	imageStore(skybox_image, xyz, skybox_output);
}
