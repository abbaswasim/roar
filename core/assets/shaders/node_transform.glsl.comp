#version 450

#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage : require

layout(local_size_x_id = 0) in;

// The following will be filled in via Renderer::patch_shaders()
// Struct Animation has special meanings as follows:
	// uvec4   animation_channel;        // x = sampler_index, y = samplers_count, z = node_index, w = target_path (0=T, 1=R, 2=S, 3=W)
	// uvec4   animation_sampler;        // x = sampler_minimum, y = sampler_maximum, z = sampler_output_type (0 = float4, 1 = float3, 2 = float, 3 = int, 4 = uint, 5 = short, 6 = ushort, 7 = char, 8 = uchar), w = interpolation (0 = linear, 1 = cubic)
	// uvec4   node_offsets;             // x = sampler_input_offset, y = sampler_output_offset, z = weight_offset, w = weights_count

// The following at the rate signs are replaced with a code like below
/*
layout(std140, set = 0, binding = 19) uniform per_frame_uniform
{
	float   delta_time;
	uint    nodes_count;
	uint    animations_count;
	uint    render_mode;
} in_per_frame_uniform;

layout(std140, set = 0, binding = 20) uniform per_view_uniform
{
	mat4    view_mat4;
	mat4    projection_mat4;
	mat4    view_projection_mat4;
	mat4    inverse_projection_mat4;
	mat4    inverse_view_projection_mat4;
	mat3    normal_mat3;
	uvec4   viewport;
	vec3    camera_position;
} in_per_view_uniform;

layout(std430, set = 0, binding = 21) buffer nodes_models
{
	mat4    node_model[];
} in_nodes_models;

layout(std430, set = 0, binding = 28) buffer morphs_weights
{
	float   morph_weights[];
} in_morphs_weights;

struct Trs_transform_input
{
	ivec4   parent_index;
	vec4    rotation;
	vec3    translation;
	vec3    scale;
	vec3    scale_inverse;
};

layout(std430, set = 0, binding = 0) buffer node_transform_input
{
	Trs_transform_input trs_transform_input[];
} in_node_transform_input;

struct Trs_transform_output
{
	vec4    rotation;
	vec3    translation;
	vec3    scale;
	vec3    scale_inverse;
};

layout(std430, set = 0, binding = 1) buffer node_transform_output
{
	Trs_transform_output trs_transform_output[];
} in_node_transform_output;

struct Animation
{
	uvec4   animation_channel;
	uvec4   animation_sampler;
	uvec4   node_offsets;
};

layout(std430, set = 0, binding = 2) buffer animations
{
	Animation animation[];
} in_animations;

layout(std430, set = 0, binding = 3) buffer animations_sampler_input
{
	float   inputs[];
} in_animations_sampler_input;

layout(std430, set = 0, binding = 4) buffer animations_sampler_output
{
	float   outputs[];
} in_animations_sampler_output;

layout(std430, set = 0, binding = 5) buffer current_animations
{
	uvec2   current_animation[];
} in_current_animations;
*/

@
@
@
@
@
@
@
@
@
@

float quaternion_magnitude(vec4 q)
{
	return sqrt((q.x * q.x) + (q.y * q.y) + (q.z * q.z) + (q.w * q.w));
}

vec3 quaternion_transform(vec4 q, vec3 v)
{
	float xx = q.x * q.x;
	float yy = q.y * q.y;
	float zz = q.z * q.z;
	float ww = q.w * q.w;

	float xy = q.x * q.y;
	float yz = q.y * q.z;
	float zw = q.z * q.w;

	float xz = q.x * q.z;
	float xw = q.x * q.w;
	float yw = q.y * q.w;

	float a = v.x;
	float b = v.y;
	float c = v.z;

	return vec3(a * (xx - yy - zz + ww) + 2 * (b * (-zw + xy) + c * (xz + yw)),
	            b * (-xx + yy - zz + ww) + 2 * (a * (xy + zw) + c * (yz - xw)),
	            c * (-xx - yy + zz + ww) + 2 * (a * (xz - yw) + b * (yz + xw)));
}

vec4 quaternion_multiply(vec4 lhs, vec4 rhs)
{
	// q0q1 = (w0v1 + v0w1 + v0 X v1, w0w1 - v0 . v1)
	return vec4(lhs.w * rhs.x + lhs.x * rhs.w + lhs.y * rhs.z - lhs.z * rhs.y,
	            lhs.w * rhs.y + lhs.y * rhs.w + lhs.z * rhs.x - lhs.x * rhs.z,
	            lhs.w * rhs.z + lhs.z * rhs.w + lhs.x * rhs.y - lhs.y * rhs.x,
	            lhs.w * rhs.w - lhs.x * rhs.x - lhs.y * rhs.y - lhs.z * rhs.z);
}

mat4 get_TRS(vec3 t, vec4 r, vec3 s)
{
	// From http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm
	float mul = 1.0 / quaternion_magnitude(r);

	// Normalize by hand
	float x = r.x * mul;
	float y = r.y * mul;
	float z = r.z * mul;
	float w = r.w * mul;

	float xx = x * x;
	float xy = x * y;
	float xz = x * z;
	float xw = x * w;

	float yy = y * y;
	float yz = y * z;
	float yw = y * w;

	float zz = z * z;
	float zw = z * w;

	// clang-format off
	return mat4(vec4((1 - 2 * (yy + zz)) * s.x, (2 * (xy + zw))     * s.x, (2 * (xz - yw))     * s.x, 0),
	            vec4((2 * (xy - zw))     * s.y, (1 - 2 * (xx + zz)) * s.y, (2 * (yz + xw))     * s.y, 0),
	            vec4((2 * (xz + yw))     * s.z, (2 * (yz - xw))     * s.z, (1 - 2 * (xx + yy)) * s.z, 0),
	            vec4(t.x,                       t.y,                       t.z,                       1));
	// clang-format on
}

void main()
{
	int node_index = int(gl_GlobalInvocationID);

	if (node_index == 0)        // TODO: Do this a bit parallel, not just once
	{
		// Lets animate first
		for (uint animid = 0; animid < in_per_frame_uniform.animations_count; animid++)
		{
			uvec2 current_animation = in_current_animations.current_animation[animid];

			uint channel_start = current_animation[0];
			uint channel_end   = channel_start + current_animation[1];

			for (uint channel_id = channel_start; channel_id < channel_end; channel_id++)
			{
				Animation anim = in_animations.animation[channel_id];

				uint sampler_index         = anim.animation_channel.x;
				uint sampler_count         = anim.animation_channel.y;
				uint node_index            = anim.animation_channel.z;
				uint target_path           = anim.animation_channel.w;        // (0=T, 1=R, 2=S, 3=W),

				float sampler_min           = uintBitsToFloat(anim.animation_sampler.x);
				float sampler_max           = uintBitsToFloat(anim.animation_sampler.y);
				uint  sampler_output_type   = anim.animation_sampler.z;        // (0 = float4, 1 = float3, 2 = float, 3 = int, 4 = uint, 5 = short, 6 = ushort, 7 = char, 8 = uchar),
				uint  sampler_interpolation = anim.animation_sampler.w;        // (0 = linear, 1 = cubic etc) // current sampler index count

				uint sampler_input_offset  = anim.node_offsets.x;
				uint sampler_output_offset = anim.node_offsets.y;
				uint weights_offset        = anim.node_offsets.z;
				uint weights_count         = anim.node_offsets.w;

				float time = in_per_frame_uniform.delta_time;

				uint sid = 0;

				uint input_time_start = sampler_input_offset;
				uint input_time_end   = sampler_input_offset + sampler_count;

				time = mod(time, sampler_max - sampler_min);

				while (input_time_start < input_time_end && in_animations_sampler_input.inputs[input_time_start] < time)
				{
					input_time_start++;
					sid++;
				}        // TODO: Add intepolation support

				if (target_path == 0)
				{
					uint cin = sampler_output_offset + (sid * 3);

					float32_t output_translationx = in_animations_sampler_output.outputs[cin + 0];
					float32_t output_translationy = in_animations_sampler_output.outputs[cin + 1];
					float32_t output_translationz = in_animations_sampler_output.outputs[cin + 2];

					// These should be in out_nodes_transforms
					in_node_transform_input.trs_transform_input[node_index].translation.x = output_translationx;
					in_node_transform_input.trs_transform_input[node_index].translation.y = output_translationy;
					in_node_transform_input.trs_transform_input[node_index].translation.z = output_translationz;
				}
				else if (target_path == 1)
				{
					uint cin = sampler_output_offset + (sid * 4);

					float32_t output_rotationx = in_animations_sampler_output.outputs[cin + 0];
					float32_t output_rotationy = in_animations_sampler_output.outputs[cin + 1];
					float32_t output_rotationz = in_animations_sampler_output.outputs[cin + 2];
					float32_t output_rotationw = in_animations_sampler_output.outputs[cin + 3];

					in_node_transform_input.trs_transform_input[node_index].rotation.x = output_rotationx;
					in_node_transform_input.trs_transform_input[node_index].rotation.y = output_rotationy;
					in_node_transform_input.trs_transform_input[node_index].rotation.z = output_rotationz;
					in_node_transform_input.trs_transform_input[node_index].rotation.w = output_rotationw;
				}
				else if (target_path == 2)
				{
					uint cin = sampler_output_offset + (sid * 3);

					float32_t output_scalex = in_animations_sampler_output.outputs[cin + 0];
					float32_t output_scaley = in_animations_sampler_output.outputs[cin + 1];
					float32_t output_scalez = in_animations_sampler_output.outputs[cin + 2];

					in_node_transform_input.trs_transform_input[node_index].scale.x = output_scalex;
					in_node_transform_input.trs_transform_input[node_index].scale.y = output_scaley;
					in_node_transform_input.trs_transform_input[node_index].scale.z = output_scalez;
				}
				else if (target_path == 3)
				{
					uint cin = sampler_output_offset + (sid * weights_count);

					for (uint wid = 0; wid < weights_count; wid++)
					{
						float32_t output_weight = in_animations_sampler_output.outputs[cin + wid];
						in_morphs_weights.morph_weights[weights_offset + wid ] = output_weight;
					}
				}
			}
		}

		// Lets transform using animated TRS
		for (uint id = 0; id < in_per_frame_uniform.nodes_count; id++)
		{
			Trs_transform_input in_trs = in_node_transform_input.trs_transform_input[id];

			vec3 translation   = in_trs.translation;
			vec4 rotation      = in_trs.rotation;
			vec3 scale         = in_trs.scale;
			vec3 scale_inverse = in_trs.scale_inverse;
			int  parent_id     = in_trs.parent_index.x;

			mat4 node_matrix = get_TRS(translation, rotation, scale);

			if (parent_id != -1)
			{
				node_matrix = in_nodes_models.node_model[parent_id] * node_matrix;
			}

			in_nodes_models.node_model[id] = node_matrix;
		}
	}
}
