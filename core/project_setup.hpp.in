// Roar Source Code
// Wasim Abbas
// http://www.waZim.com
// Copyright (c) 2022
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the 'Software'),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software
// is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
// OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// Version: 1.0.0

#pragma once

#include "profiling/rorlog.hpp"
#include "resources/rorprojectroot.hpp"
#include "settings/rorsettings.hpp"
#include <filesystem>

// This one is setup by cmake with a `configure` command, currently pointing at roar root absolute path
// This is used below to access default "assets" and "configs" folders in the root/core/
#define roar_dir "${roar_engine_dir}"

namespace ror
{

void create_content_symlink(std::filesystem::path a_target, std::filesystem::path a_link_name)
{
	ror::log_info("Creating symlink to {} to {}", a_target.c_str(), a_link_name.c_str());

	// Lets create a symlink to the target folder
	if (!std::filesystem::exists(a_link_name))
		std::filesystem::create_directory_symlink(a_target, a_link_name);
}

void cleanup_on_boot()
{
	if (ror::settings().m_clean_on_boot)
	{
		auto pr = ror::get_project_root().path();
		for (auto &clean_dir : ror::settings().m_clean_dirs)
		{
			auto remove_dir = pr / clean_dir;
			ror::log_info("Removing directory {}", remove_dir.c_str());
			if (std::filesystem::exists(remove_dir))
				std::filesystem::remove_all(remove_dir);
		}
	}
}

// Call with the a project name where your project is, and a prefix to append to the current path "tests", "editor" etc
void setup_project_root(std::filesystem::path a_project_name, std::filesystem::path a_prefix = "")
{
	std::filesystem::path root_dir_path{roar_dir};

	// Lets reset current path to the roar engine root
	auto current_current_path = std::filesystem::current_path();
	auto new_current_path     = root_dir_path / a_prefix;

	if (current_current_path != root_dir_path)
		ror::log_warn("Current path is not pointing at the engine root. To hide this message run from engine root.");

	ror::log_info("Changing current directory to {}.", new_current_path.c_str());
	std::filesystem::current_path(new_current_path);

	// This will create a project root folder name a_project_name in the current_path and give absolute path to it
	std::filesystem::path project_root_dir{ror::get_project_root(a_project_name).path()};

	auto assets = new_current_path / "assets";

	std::filesystem::path project_assets{project_root_dir / "assets"};

	// Now create symbolic links to the core/assets and editor/assets into the project folder
	create_content_symlink(assets, project_assets);

	// Lets clean folders that are requested to be cleaned
	cleanup_on_boot();
}

}        // namespace ror
